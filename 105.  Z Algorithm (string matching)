Question Link : https://www.codingninjas.com/studio/problems/z-algorithm_8230818?challengeSlug=striver-sde-challenge&leftPanelTab=0

Solution 1 : (using KMP Algorithm)

#include<bits/stdc++.h>

//Using KMP Algorithm
vector<int> buildPrefix(string &s){
	int n = s.size();
	vector<int> prefix(n,0);

	for(int i=1;i<n;i++){
		int j = prefix[i-1];

		while(j>0 && s[i] != s[j]) j= prefix[j-1];

		if(s[i] == s[j]) j++;

		prefix[i] = j;
	}

	return prefix;
}

int zAlgorithm(string s, string p, int n, int m)
{
	vector<int> prefix = buildPrefix(p);

	int cnt = 0;
	int i=0,j=0;
	while(i < n){
		if(s[i] == p[j]){
			i++;
			j++;
		}
		else{
			if(j > 0) j = prefix[j-1];
			else i++;
		}

		if(j == p.size()){
			cnt++;
			j = prefix[j-1];
		}
	}

	return cnt;
}


Solution 2 : (Using Z - algorithm)
#include<bits/stdc++.h>

//https://www.youtube.com/watch?v=5CEU5okQLG4&ab_channel=CodingNinjas
int zAlgorithm(string s, string p, int n, int m)
{
	string str = p + "#" + s;
	int k = str.size();

	vector<int> z(k,0);

	int i = 0,l=0,r=0;
	while(i < str.size()){
		if(i > r){
			//resetting l and r
			l = i;
			r = i;
            
			// calculating matching length and updating r
			while(r < str.size() && str[r - l] == str[r]){
				r++;
			}
		    
			r--;

			z[i] = r - l + 1; //matching length
		}
		else{
			int pos = i - l;
			if(z[pos] + i <= r){
				z[i] = z[pos]; 
			}
			else{
				l = i;

				while(r < str.size() && str[r - l] == str[r]) r++;

				r--;

				z[i] = r - l + 1;
			}
		}

		i++;
	}
    
	//now count occurence of pattern length in z array
	int cnt = 0;
	for(int i : z){
		cnt += (i == m);
	}

	return cnt;
}
