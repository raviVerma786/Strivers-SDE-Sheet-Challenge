Question Link : https://www.codingninjas.com/codestudio/problems/missing-and-repeating-numbers_8230733?challengeSlug=striver-sde-challenge&leftPanelTab=1

Solution 1: 

//https://youtu.be/2D0D8HE6uak
pair<int, int> missingAndRepeating(vector<int> &arr, int n) {
	int x,y; // duplicate and missing number respectively

	int sum1ToN = (n * (n+1))/2;
	int sum = accumulate(arr.begin(),arr.end(),0);
	int diffOfXAndY = sum - sum1ToN;
    
	long long sumOfSquares1ToN = (n*1LL*(n+1)*1LL*(2*n + 1))/6;
	long long sqSum = 0;
	for(int i : arr) sqSum += (i*1LL*i);

	int sumOfXAndY = (sqSum - sumOfSquares1ToN)/diffOfXAndY;
    
	x = (sumOfXAndY + diffOfXAndY)/2;
	y = x - diffOfXAndY;

	return {y,x};
}


Solution 2 : 

//https://youtu.be/2D0D8HE6uak
pair<int, int> missingAndRepeating(vector<int> &arr, int n) {
	int xr = 0;
	for(int i=0;i<n;i++){
		xr = (xr ^ arr[i]);
		xr = (xr ^ (i + 1));
	}
    
	int bitNo = 0;
	while(1){
		if((xr & (1<<bitNo)) != 0) break;
		bitNo++;
	}

	int zero = 0, one = 0;
	for(int i =0;i<n;i++){
		int bit = (arr[i] & (1<<bitNo));
		if(bit != 0) one = (one ^ arr[i]);
		else zero = (zero ^ arr[i]);

		bit = ((i+1) & (1<<bitNo));
		if(bit != 0) one = (one ^ (i + 1));
		else zero = (zero ^ (i + 1));
	}
    
	int cnt = 0;
	for(int i : arr){
		if(i == zero) cnt++;
	}

	if(cnt == 2) return {one,zero};
	return {zero,one};
}

