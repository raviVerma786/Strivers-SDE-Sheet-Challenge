Question Link : https://www.codingninjas.com/codestudio/problems/count-inversions_8230680?challengeSlug=striver-sde-challenge&leftPanelTab=1
                https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
                

Solution : 

//https://youtu.be/AseUmwVNaoY
long long ans = 0;
    void mergeSort(long long arr[],long long l,long long h){
        if(l>=h) return;
        long long mid = (l + h)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,h);
        
        //merge 
        vector<long long> v;
        long long i=l,j=mid+1;
        while(i<=mid && j<=h){
            if(arr[i] <= arr[j]){
                v.push_back(arr[i]);
                i++;
                
            } 
            else{
                v.push_back(arr[j]);
                j++;
                ans += (mid - i + 1);
            }
        }
        while(i<=mid){
            v.push_back(arr[i]);
            i++;
        }
        while(j<=h){
            v.push_back(arr[j]);
            j++;
        }
        for(long long k=l;k<=h;k++){
            arr[k] = v[k-l];
        }
    }
long long getInversions(long long *arr, int n){
       mergeSort(arr,0,n-1);
       return ans;
}
