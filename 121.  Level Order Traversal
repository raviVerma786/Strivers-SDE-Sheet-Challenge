Question Link : https://leetcode.com/problems/binary-tree-level-order-traversal/
https://www.codingninjas.com/studio/problems/level-order-traversal_8230716?challengeSlug=striver-sde-challenge&leftPanelTab=1

solution (code studio):

vector<int> getLevelOrder(BinaryTreeNode<int> *root)
{
    vector<int> ans;
    if(!root) return ans;
    
    queue<BinaryTreeNode<int>*> q;
    q.push(root);

    while(!q.empty()){
        int n = q.size();

        for(int i=0;i<n;i++){
            BinaryTreeNode<int>* node = q.front();
            q.pop();

            ans.push_back(node->val);

            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);
        }
    }

    return ans;
}


Solution (Leetcode):
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(!root) return ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            vector<int> temp;
            int k = q.size();
            for(int i=0;i<k;i++){
                temp.push_back(q.front()->val);
                if(q.front()->left) q.push(q.front()->left);
                if(q.front()->right) q.push(q.front()->right);
                q.pop();
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
