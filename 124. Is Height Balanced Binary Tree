Question Link : https://leetcode.com/problems/balanced-binary-tree/
https://www.codingninjas.com/studio/problems/is-height-balanced-binary-tree_8230771?challengeSlug=striver-sde-challenge&leftPanelTab=1

Solution 1 : (brute force accepted solution) O(n*n)

int height(BinaryTreeNode<int>* root){
    if(!root) return 0;
    return 1 + max(height(root->left),height(root->right));
}

bool isBalancedBT(BinaryTreeNode<int>* root) {
    if(!root) return true;
    if(abs(height(root->left) - height(root->right)) > 1) return false;

    return isBalancedBT(root->left) && isBalancedBT(root->right);
}


Solution 2 : (optimal) O(n)

// https://youtu.be/Yt50Jfbd8Po
int height(BinaryTreeNode<int>* root,bool &isBalanced){
    if(!root) return 0;

    int lh = height(root->left,isBalanced);
    int rh = height(root->right,isBalanced);

    if(abs(lh - rh) > 1){
        isBalanced = false;
    }

    return 1 + max(lh,rh);
}

bool isBalancedBT(BinaryTreeNode<int>* root) {
    bool isBalanced = true;
    height(root,isBalanced);

    return isBalanced;
}

