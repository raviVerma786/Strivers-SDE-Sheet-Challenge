Question Link : https://www.codingninjas.com/studio/problems/boundary-traversal-of-binary-tree_8230712?challengeSlug=striver-sde-challenge&leftPanelTab=1
https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1

Solution : 

// https://youtu.be/0ca1nvR0be4
void addLeftBoundary(TreeNode<int>* root,vector<int>&ans){
    TreeNode<int>* node = root->left;
    while(node){
        if(node->left || node->right){
            //only non leaf left boundary nodes
            ans.push_back(node->data);
        }
        if(node->left) node = node->left;
        else node = node->right;
    }
}

void addRightBoundary(TreeNode<int>*root,vector<int>&ans){
    TreeNode<int>* node = root->right;
    vector<int> temp;
    while(node){
        if(node->left || node->right){
            //only non leaf right boundary nodes
            temp.push_back(node->data);
        }
        if(node->right) node = node->right;
        else node = node->left;
    }

    for(int i=temp.size()-1;i>=0;i--){
        ans.push_back(temp[i]);
    }
}

void addLeaves(TreeNode<int>* root,vector<int>&ans){
    if(!root) return;
    if(!root->left && !root->right){
        ans.push_back(root->data);
        return;
    }

    addLeaves(root->left,ans);
    addLeaves(root->right,ans);
}
vector<int> traverseBoundary(TreeNode<int>* root){
   vector<int> ans;
   if(!root) return ans;

   //if root is not leaf then add data of root into the ans
   if(root->left || root->right) ans.push_back(root->data);

   addLeftBoundary(root,ans);
   addLeaves(root,ans);
   addRightBoundary(root,ans);

   return ans;
}
