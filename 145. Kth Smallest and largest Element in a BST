Question : Kth Smallest (using morris inorder traversal already added in this repo)
https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/

Solution : 

//  https://www.youtube.com/watch?v=80Zug6D1_r4&ab_channel=takeUforward

class Solution {
private: 
public:
    int kthSmallest(TreeNode* root, int k) {
        TreeNode* curr = root;
        int ans = -1;

        while(curr){
            if(k == 1){
                ans = curr->val;
            }
            
            if(!curr->left){
                k--;
                curr = curr->right;
            }
            else{
                 TreeNode* prev = curr->left;
                 while(prev->right && prev->right != curr){
                     prev = prev->right;
                 }

                 if(!prev->right){
                     prev->right = curr;
                     curr = curr->left;
                 }
                 else{
                     prev->right = NULL;
                     k--;
                     curr = curr->right;
                 }
            }
        }

        return ans;
    }
};


Question : Kth largest (reverse inorder morris traversal)

solution 1: Brute force : 

void inorderhelp(TreeNode<int>* root,vector<int>& x){
    if(root==NULL){
        return;
    }
    inorderhelp(root->left,x);
    x.push_back(root->data);
    inorderhelp(root->right,x);
    //inorder traversal
}
int KthLargestNumber(TreeNode<int>* root, int k) 
{
    vector<int> x;
    inorderhelp(root,x);
    //inorder traversal
    int n=x.size();
    if(k>n){
        return -1;
    }
    return x[n-k];
    //return kth largest element.
}


Solution 2 : Morris traversal

// https://www.youtube.com/watch?v=80Zug6D1_r4&ab_channel=takeUforward
//reverse inorder traversal using morris traversal

int KthLargestNumber(TreeNode<int>* root, int k) 
{
    TreeNode<int>* curr = root;
    int ans = -1;
    while(curr){
        if(k == 1) ans = curr->data;

        if(!curr->right){
            k--;
            curr = curr->left;
        }else{
            TreeNode<int>* prev = curr->right;
            while(prev->left && prev->left != curr){
                prev = prev->left;
            }

            if(!prev->left){
                prev->left = curr;
                curr = curr->right;
            }
            else{
                prev->left = NULL;
                k--;
                curr = curr->left;
            }
        }
    }

    return ans;
}
