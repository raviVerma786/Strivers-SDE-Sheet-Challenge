Question Link : https://leetcode.com/problems/find-median-from-data-stream/
https://www.codingninjas.com/studio/problems/median-in-a-stream_8230765?challengeSlug=striver-sde-challenge&leftPanelTab=1

Solution: (Leetcode):

class MedianFinder {
    // https://www.youtube.com/watch?v=1LkOrc-Le-Y&ab_channel=TECHDOSE
private:
    priority_queue<int,vector<int>,greater<int>> minHeap;//store right side of mid
    priority_queue<int> maxHeap;//store left side of mid
public:
    MedianFinder() {
    }
    
    void addNum(int num) {
       if(maxHeap.size() == 0) maxHeap.push(num);
       else if(maxHeap.size() == minHeap.size()){
           if(num < minHeap.top()) maxHeap.push(num);
           else{
               int temp = minHeap.top();
               minHeap.pop();

               minHeap.push(num);
               maxHeap.push(temp);
           }
       }
       else{
           if(num > maxHeap.top()) minHeap.push(num);
           else{
               int temp = maxHeap.top();
               maxHeap.pop();

               maxHeap.push(num);
               minHeap.push(temp);
           }
       }
    }
    
    double findMedian() {
       int n = minHeap.size() + maxHeap.size();
       if(n%2 == 1) {
           return maxHeap.top();
       }

       return (minHeap.top() + maxHeap.top())/2.0;
    }
};


Solution : Code Studio : 

#include<bits/stdc++.h>

void insert(int ele,priority_queue<int> &maxHeap,priority_queue<int,vector<int>,greater<int>>&minHeap){
	if(maxHeap.size() == 0) maxHeap.push(ele);
	else if(maxHeap.size() == minHeap.size()){
		if(minHeap.top() > ele){
			maxHeap.push(ele);
		}else{
			int temp = minHeap.top();
			minHeap.pop();
			minHeap.push(ele);
			maxHeap.push(temp);
		}
	}else{
		if(maxHeap.top() < ele) minHeap.push(ele);
		else{
			int temp = maxHeap.top();
			maxHeap.pop();
			minHeap.push(temp);
			maxHeap.push(ele);
		}
	}
}
vector<int> findMedian(vector<int> &arr, int n){
	priority_queue<int> maxHeap;
	priority_queue<int,vector<int>,greater<int>> minHeap;
	vector<int> ans;

	for(int i=0;i<n;i++){
		insert(arr[i],maxHeap,minHeap);
		if((i+1)%2){
			ans.push_back(maxHeap.top());
		}else{
			ans.push_back((maxHeap.top() + minHeap.top())/2);
		}
	}

	return ans;
}


