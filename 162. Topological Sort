Question Link : https://www.codingninjas.com/studio/problems/topological-sort_8230784?challengeSlug=striver-sde-challenge&leftPanelTab=0
https://practice.geeksforgeeks.org/problems/topological-sort/1

Solution : 

#include <bits/stdc++.h> 

// https://youtu.be/73sneFXuTEg
// https://youtu.be/5lZ0iJMrUMk
vector<int> topologicalSort(vector<vector<int>> &edges, int V, int e)  {
        vector<int> adj[V];
        vector<int> indegree(V,0); 

        for(vector<int>&v : edges){
            adj[v[0]].push_back(v[1]);
            indegree[v[1]]++;
        }
        
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        if(indegree[i] == 0) q.push(i);
	    }
	    
	    vector<int> ans;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        
	        ans.push_back(node);
	        for(int i : adj[node]){
	            if(--indegree[i] == 0) q.push(i);
	        }
	    }
	    
	    return ans;
}


Solution 2 : Using dfs gfg

// https://www.youtube.com/watch?v=5lZ0iJMrUMk&ab_channel=takeUforward
class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	
	void dfs(vector<int>adj[],stack<int>&st,vector<bool>&vis,int node){
	    vis[node] = true;
	    
	    for(int i : adj[node]){
	        if(!vis[i]){
	            dfs(adj,st,vis,i);
	        }
	    }
	    
	    st.push(node);
	}
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   stack<int> st;
	   vector<bool> vis(V,false);
	   for(int i=0;i<V;i++){
	       if(!vis[i]){
	           dfs(adj,st,vis,0);
	       }
	   }
	    
	    vector<int> ans;
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
};
