Question Link : https://leetcode.com/problems/is-graph-bipartite/
https://www.codingninjas.com/studio/problems/check-bipartite-graph_8230761?challengeSlug=striver-sde-challenge&leftPanelTab=1

Solution : 

#include<bits/stdc++.h>

// https://youtu.be/-vu34sct1g8
// https://youtu.be/KG5YFfR0j8A
bool isBipartite(vector<vector<int>>&adj,vector<int>&color,int node,int fillColor){
	color[node] = fillColor;

	for(int i=0;i<adj.size();i++){
		if(adj[node][i] == 1){
			if(color[i] == -1){
				if(!isBipartite(adj, color, i, !fillColor)) return false;
			}
			else if(color[i] == color[node]) return false;
		}
	}

	return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	int n = edges.size();
	vector<int> color(n,-1);
    
	for(int i=0;i<n;i++){
		if(color[i] == -1){
			if(!isBipartite(edges,color,i,0)) return false;
		}
	}
	
	return true;
}


Solution 2 : Using BFS (leetcode)

class Solution {
public:
    //here I chose two colors 0 and 1
    bool checkBirpartiteUsingBFS(vector<vector<int>>&graph,vector<int>&color,int src){
        color[src] = 0;

        queue<int> q;
        q.push(src);

        while(!q.empty()){
            int node = q.front();
            q.pop();

            int fillColor = !color[node];

            for(int i : graph[node]){
                if(color[i] == -1){
                    color[i] = fillColor;
                    q.push(i);
                }
                else if(color[i] == color[node]) return false;
            }
        }

        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
       int n = graph.size();
       vector<int> color(n,-1);

       for(int i=0;i<n;i++){
           if(color[i]  == -1){
               if(!checkBirpartiteUsingBFS(graph,color,i)) return false;
           }
       }

       return true;
    }
};
