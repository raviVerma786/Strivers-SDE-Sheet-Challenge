Question Link : https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1
https://www.codingninjas.com/studio/problems/dijkstra-s-shortest-path_8230755?challengeSlug=striver-sde-challenge&leftPanelTab=1

Solution : 

#include <bits/stdc++.h> 

// https://youtu.be/rp1SMw7HSO8
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    vector<pair<int,int>> adj[vertices];
    for(vector<int>&v : vec){
        adj[v[0]].push_back({v[1],v[2]});
        adj[v[1]].push_back({v[0],v[2]});
    }
    
    vector<int> dist(vertices,INT_MAX);
    dist[source] = 0;

    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    pq.push({0,source}); //{distance from source,node}

    while(!pq.empty()){
        int dis = pq.top().first, node = pq.top().second;
        pq.pop();
        
        for(pair<int,int>&child : adj[node]){
            int v = child.first, d = child.second;
            if(dis + d < dist[v]){
                dist[v] = dis + d;
                pq.push({dis + d,v});
            }
        }
    }
    
    return dist;
}
