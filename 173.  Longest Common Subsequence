Question Link : https://leetcode.com/problems/longest-common-subsequence/
https://www.codingninjas.com/studio/problems/longest-common-subsequence_8230681?challengeSlug=striver-sde-challenge&leftPanelTab=1

Solution : (for recusive solution see leetcode previous submissions)

// https://youtu.be/NPZn9jBrX8U
class Solution{
    public:
    int longestCommonSubsequence(string text1, string text2) {
       int n = text1.size(),m=text2.size();
       vector<vector<int>>dp(n+1,vector<int>(m+1,0));
       int ans = 0;
       for(int i=1;i<=n;i++){
           for(int j=1;j<=m;j++){
               if(text1[i-1] == text2[j-1]){
                   dp[i][j] = 1 + dp[i-1][j-1];
               }
               else{
                   dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
               }
                ans = max(ans,dp[i][j]);
           }
       }
        
       return ans;
    }
};


Solution 2 : after space optimization


// https://youtu.be/NPZn9jBrX8U
class Solution{
    public:
    int longestCommonSubsequence(string text1, string text2) {
       int n = text1.size(),m=text2.size();
       vector<int> prev(m+1,0),curr(m+1,0);
       int ans = 0;
       for(int i=1;i<=n;i++){
           for(int j=1;j<=m;j++){
               if(text1[i-1] == text2[j-1]){
                   curr[j] = 1 + prev[j-1];
               }
               else{
                   curr[j] = max(prev[j],curr[j-1]);
               }
                ans = max(ans,curr[j]);
           }
           prev = curr;
       }
        
       return ans;
    }
};
