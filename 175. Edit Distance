Question Link : https://leetcode.com/problems/edit-distance/
https://www.codingninjas.com/studio/problems/edit-distance_8230685?challengeSlug=striver-sde-challenge&leftPanelTab=1

Solution 1 : recursive solution TC:O(n1 * n2)  SC: O(n1*n2 + (n1 + n2))

#include<bits/stdc++.h>

//https://youtu.be/fJaKO8FbDdo

int helper(string& s1,string& s2,int i,int j,vector<vector<int>>&dp){
    if(i<0) return j+1; //in this case we need to insert j+1 characters into s1
    if(j < 0) return i+1; //in this case we need to delete i+1 characters from s1
    if(dp[i][j] != -1) return dp[i][j];

    if(s1[i] == s2[j]){
        return dp[i][j] = helper(s1,s2,i-1,j-1,dp);
    }

    int insert = 1 + helper(s1,s2,i,j-1,dp);
    int del = 1 + helper(s1,s2,i-1,j,dp);
    int replace = 1 + helper(s1,s2,i-1,j-1,dp);

    return dp[i][j] = min(insert,min(del,replace));


}
int editDistance(string str1, string str2)
{
    int n1 = str1.size(), n2 = str2.size();
    vector<vector<int>>dp(n1,vector<int>(n2,-1));
    return helper(str1,str2,n1-1,n2-1,dp);
}


Solution 2 : Iterative of the above solution TC:O(n1 * n2)  SC: O(n1*n2)

#include<bits/stdc++.h>

//https://youtu.be/fJaKO8FbDdo

int editDistance(string s1, string s2)
{
    int n1 = s1.size(), n2 = s2.size();
    vector<vector<int>>dp(n1 + 1,vector<int>(n2 + 1,0));

    for(int i=0;i<=n1;i++){
        for(int j=0;j<=n2;j++){
            if(i==0) dp[i][j] = j;
            else if(j==0) dp[i][j] = i;
            else if(s1[i-1] == s2[j-1]){
                dp[i][j] = dp[i-1][j-1];
            }
            else{
                int insert = 1 + dp[i][j-1];
                int del = 1 + dp[i-1][j];
                int replace = 1 + dp[i-1][j-1];
                dp[i][j] = min(insert,min(del,replace));
            }
        }
    }

    return dp[n1][n2];
}


solution 3 : space optimised solution TC:O(n1 * n2)  SC: O(n2)

#include<bits/stdc++.h>

//https://youtu.be/fJaKO8FbDdo

int editDistance(string s1, string s2)
{
    int n1 = s1.size(), n2 = s2.size();
    vector<int> prev(n2+1,0), curr(n2+1,0);

    for(int i=0;i<=n1;i++){
        for(int j=0;j<=n2;j++){

            if(i==0) curr[j] = j;
            else if(j==0) curr[j] = i;
            else if(s1[i-1] == s2[j-1]){
                curr[j] = prev[j-1];
            }
            else{
                int insert = 1 + curr[j-1];
                int del = 1 + prev[j];
                int replace = 1 + prev[j-1];
                curr[j] = min(insert,min(del,replace));
            }

        }
        prev = curr;
    }

    return prev[n2];
}
