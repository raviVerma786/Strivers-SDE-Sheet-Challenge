Question Link : https://leetcode.com/problems/minimum-path-sum/
https://www.codingninjas.com/studio/problems/minimum-path-sum_8230791?challengeSlug=striver-sde-challenge&leftPanelTab=1


Solution 1: recursive solution with memoization TC : O(m*n) ,SC : O(m*n) + O(m+n)  

#include <bits/stdc++.h> 
// https://youtu.be/_rgTlyky1uQ
int helper(vector<vector<int>>&grid,int i,int j,vector<vector<int>>&dp){
    if(i == grid.size()-1 && j == grid[0].size()-1) return grid[i][j];
    if(i==grid.size() || j==grid[0].size()) return 1e9;
    if(dp[i][j] != -1) return dp[i][j];

    return dp[i][j] = grid[i][j] + min(helper(grid,i+1,j,dp),helper(grid,i,j+1,dp));
}

int minSumPath(vector<vector<int>> &grid) {
   int m = grid.size(), n = grid[0].size();
   vector<vector<int>> dp(m,vector<int>(n,-1));

   return helper(grid,0,0,dp);
}


Solution 2 : iterative solution of recursive code TC : O(m*n) ,SC : O(m*n)

#include <bits/stdc++.h> 

// https://youtu.be/_rgTlyky1uQ
int minSumPath(vector<vector<int>> &grid) {
   int m = grid.size(), n = grid[0].size();
   vector<vector<int>> dp(m+1,vector<int>(n+1,1e9));

   for(int i = m-1;i>=0;i--){
       for(int j = n-1;j>=0;j--){
           if(i==m-1 && j==n-1) dp[m-1][n-1] = grid[m-1][n-1]; //base case
           else{
               dp[i][j] = grid[i][j] + min(dp[i+1][j],dp[i][j+1]);
           }
       }
   }
   return dp[0][0];
}

Solution 3 : space optimized solution TC : O(m*n) ,SC : O(n)

#include <bits/stdc++.h> 

// https://youtu.be/_rgTlyky1uQ
int minSumPath(vector<vector<int>> &grid) {
   int m = grid.size(), n = grid[0].size();
   vector<int> curr(n+1,1e9), next(n+1,1e9);

   for(int i = m-1;i>=0;i--){
       for(int j = n-1;j>=0;j--){
           if(i==m-1 && j==n-1) curr[j] = grid[m-1][n-1]; //base case
           else{
               curr[j] = grid[i][j] + min(next[j],curr[j+1]);
           }
       }

       next = curr;
   }
   
   return curr[0];
}
