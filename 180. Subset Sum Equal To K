Question Link : https://www.codingninjas.com/studio/problems/subset-sum-equal-to-k_8230844?challengeSlug=striver-sde-challenge&leftPanelTab=1
https://leetcode.com/problems/partition-equal-subset-sum/description/

Solution 1 : Recusive solution with memoization TC = (n*sum), SC = (n*sum) + (n)

#include <bits/stdc++.h> 

//https://youtu.be/fWX9xDmIzRI
bool helper(vector<int>&nums,int sum,int i,vector<vector<int>>&dp){
        if(sum == 0) return true;
        if(i == 0) return sum == nums[0];
        if(dp[i][sum] != -1) return dp[i][sum];
        
        bool take = false;
        if(nums[i] <= sum){
            take = helper(nums,sum - nums[i],i-1,dp);
        }

        bool notTake = helper(nums,sum,i-1,dp);
        return dp[i][sum] = take || notTake;
}
bool subsetSumToK(int n, int sum, vector<int> &nums) {
       vector<vector<int>>dp(n,vector<int>(sum+1,-1));
       return helper(nums,sum,n-1,dp);
}

Solution 2 : Iterative solution of the recursive solution TC = (n*sum), SC = (n*sum)

#include <bits/stdc++.h> 

//https://youtu.be/fWX9xDmIzRI
bool subsetSumToK(int n, int k, vector<int> &nums) {
       vector<vector<bool>>dp(n,vector<bool>(k+1,0));
       for(int i=0;i<n;i++) dp[i][0] = true;
       dp[0][nums[0]] = true;

       for(int i=1;i<n;i++){
           for(int sum = 1;sum<=k;sum++){
                bool take = false;
                if(nums[i] <= sum){
                    take = dp[i-1][sum - nums[i]];
                }

                bool notTake =dp[i-1][sum];
                dp[i][sum] = take || notTake;
           }
       }

       return dp[n-1][k];
}


Solution 3 : space optimised solution of iterative solution TC = (n*sum), SC = (sum)

#include <bits/stdc++.h> 

//https://youtu.be/fWX9xDmIzRI
bool subsetSumToK(int n, int k, vector<int> &nums) {
       vector<bool>prev(k+1,false),curr(k+1,false);
       prev[0] = curr[0] = true;
       prev[nums[0]] = true;

       for(int i=1;i<n;i++){
           for(int sum = 1;sum<=k;sum++){
                bool take = false;
                if(nums[i] <= sum){
                    take = prev[sum - nums[i]];
                }

                bool notTake =prev[sum];
                curr[sum] = take || notTake;
           }
           prev = curr;
       }

       return curr[k];
}
