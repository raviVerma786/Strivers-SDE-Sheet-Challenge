Question Link : https://www.codingninjas.com/codestudio/problems/reverse-nodes-in-k-group_8230709?challengeSlug=striver-sde-challenge&leftPanelTab=1\
                https://leetcode.com/problems/reverse-nodes-in-k-group/description/

Solutions : 

Coding Ninja Solution : 

Node *getListAfterReverseOperation(Node *head, int n, int b[]){
	if(!head) return head;

	Node* dummy = new Node(0);
	dummy->next = head;

	Node* curr = dummy,*nex = dummy, *pre = dummy;
	int count = 0;

	while(curr->next){
		curr = curr->next;
		count++;
	}
    
	int i = 0;
	bool check = true;

	while(i < n && check){
		int k = b[i];
		if(k == 0){
			i++;
			continue;
		}
		if(count <= 0) break;
		else if(count < k){
			k = count;
			check = false;
		}

		curr = pre->next;
		nex = curr->next;

		for(int i=1;i<k;i++){
			curr->next = nex->next;
			nex->next = pre->next;
			pre->next = nex;
			nex = curr->next;
		}
		
		pre = curr;
		count -= k;
        i++;
	}

	return dummy->next;
}



Leetcode Solution :   
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head || k == 1) return head;

        ListNode* dummy = new ListNode(0);
        dummy->next = head;

        ListNode* curr = dummy,*nex = dummy, *pre = dummy;
        int count = 0;

        while(curr->next){
            curr = curr->next;
            count++;
        }

        while(count >= k){
            curr = pre->next;
            nex = curr->next;

            for(int i=1;i<k;i++){
                curr->next = nex->next;
                nex->next = pre->next;
                pre->next = nex;
                nex = curr->next;
            }
            
            pre = curr;
            count -= k;
        }

        return dummy->next;
    }
};
