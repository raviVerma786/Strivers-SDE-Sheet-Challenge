Question Link : https://www.codingninjas.com/codestudio/problems/fractional-knapsack_8230767?challengeSlug=striver-sde-challenge&leftPanelTab=1
                https://practice.geeksforgeeks.org/problems/fractional-knapsack-1587115620/1
Solution : 

// https://youtu.be/F_DDzYnxO14
double maximumValue (vector<pair<int, int>>& items, int n, int w)
{
    sort(items.begin(),items.end(),[](pair<int,int>&p1,pair<int,int>&p2){
        return (p1.second * 1.0)/p1.first > (p2.second * 1.0)/p2.first;
    });

    double ans = 0;
    for(int i=0;i<n;i++){
        if(w >= items[i].first){
            ans += items[i].second;
            w -= items[i].first;
        }
        else{
            double fraction = (items[i].second * 1.0)/items[i].first;
            ans += (fraction * w);
            break;
        }
    }

    return ans;
}


Gfg : Solution : 

class Solution
{
    static bool cmp(Item& a, Item& b){
        return (double)a.value / a.weight > (double)b.value / b.weight;
    }
    public:
    //Function to get the maximum total value in the knapsack.
    
    double fractionalKnapsack(int w, Item arr[], int n)
    {
        sort(arr,arr + n,&cmp);
    
        double ans = 0;
        for(int i=0;i<n;i++){
            if(w >= arr[i].weight){
                ans += arr[i].value;
                w -= arr[i].weight;
            }
            else{
                double fraction = (arr[i].value * 1.0)/arr[i].weight;
                ans += (fraction * w);
                break;
            }
        }
    
        return ans;
    }
        
};
