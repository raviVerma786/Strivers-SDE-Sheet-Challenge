Question Link : https://leetcode.com/problems/combination-sum/description/
https://www.codingninjas.com/codestudio/problems/return-subsets-sum-to-k_8230706?challengeSlug=striver-sde-challenge&leftPanelTab=0

Solution (Coding Ninja): 


void helper(vector<int>&nums,vector<int>&temp,int i,int sum,vector<vector<int>>&ans){
    
    if(sum == 0){
        ans.push_back(temp);
    }
    
    for(int j=i;j<nums.size();j++){
        temp.push_back(nums[j]);
        sum -= nums[j];

        helper(nums,temp,j+1,sum,ans);
        
        temp.pop_back();
        sum += nums[j];
    }
    
}

vector<vector<int>> findSubsetsThatSumToK(vector<int> nums, int n, int k)
{    
    vector<int>temp;
    vector<vector<int>>ans;
    helper(nums,temp,0,k,ans);
    
    return ans;
}

Solution (Leetcode):

class Solution {
public:
    void helper(vector<int>&nums,vector<int>&temp,int i,int sum,vector<vector<int>>&ans){
    
    if(i == nums.size()){
        if(sum == 0) ans.push_back(temp);
        return;
    }
    
    if(nums[i] <= sum){
        temp.push_back(nums[i]);
        helper(nums,temp,i,sum - nums[i],ans);   
        temp.pop_back();
    }

    helper(nums,temp,i+1,sum,ans);
}
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int>temp;
        vector<vector<int>>ans;
        helper(candidates,temp,0,target,ans);
        
        return ans;
    }
};
