Question Link : https://www.codingninjas.com/codestudio/problems/n-queens_8230707?challengeSlug=striver-sde-challenge&leftPanelTab=1
                https://leetcode.com/problems/n-queens/description/
                
video link : https://youtu.be/i05Ju7AftcM

Solution (Code Studio):


    bool isSafe(int row,int col,vector<vector<int>> &board,int n){
        for(int i=0;i<n;i++){
            if(i==row) continue;
            if(board[i][col] == 1) return false;
        }
        for(int i=0;i<n;i++){
            if(i==col) continue;
            if(board[row][i] == 1) return false;
        }
        int i=row,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 1) return false;
            i--;
            j--;
        }
         i=row,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 1) return false;
            i++;
            j++;
        }
         i=row-1,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 1) return false;
            i--;
            j++;
        }
         i=row,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 1) return false;
            i++;
            j--;
        }
        return true;
    }
    
    void  solve(int col,vector<vector<int>> &board,vector<vector<int>> &ans,int n){
        if(col == n) {
            vector<int> temp;
            for(vector<int>&v : board){
                temp.insert(temp.end(),v.begin(),v.end());
            }
            ans.push_back(temp);
            return;
        }
        for(int row=0;row<n;row++){
            if(isSafe(row,col,board,n)){
                board[row][col] = 1;
                solve(col+1,board,ans,n);
                board[row][col] = 0;
            }
        }
        
    }
vector<vector<int>> solveNQueens(int n) {
        vector<vector<int>> ans;
        vector<vector<int>> board(n,vector<int>(n,0));
        solve(0,board,ans,n);
        return ans;
}



Solution (Leetcode):

class Solution {
public:
    bool isSafe(int row,int col,vector<string> &board,int n){
        for(int i=0;i<n;i++){
            if(i==row) continue;
            if(board[i][col] == 'Q') return false;
        }
        for(int i=0;i<n;i++){
            if(i==col) continue;
            if(board[row][i] == 'Q') return false;
        }
        int i=row,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 'Q') return false;
            i--;
            j--;
        }
         i=row,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 'Q') return false;
            i++;
            j++;
        }
         i=row-1,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 'Q') return false;
            i--;
            j++;
        }
         i=row,j=col;
        while(i>=0 && i<n && j>=0 && j<n){
            if(board[i][j] == 'Q') return false;
            i++;
            j--;
        }
        return true;
    }
    
    void  solve(int col,vector<string> &board,vector<vector<string>> &ans,int n){
        if(col == n) {
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(isSafe(row,col,board,n)){
                board[row][col] = 'Q';
                solve(col+1,board,ans,n);
                board[row][col] = '.';
            }
        }
        
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++) board[i] = s;
        solve(0,board,ans,n);
        return ans;
    }
};
