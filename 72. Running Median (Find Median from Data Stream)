Question Link : https://www.codingninjas.com/codestudio/problems/running-median_8230682?challengeSlug=striver-sde-challenge&leftPanelTab=1
https://leetcode.com/problems/find-median-from-data-stream/

Solution : 

//https://www.youtube.com/watch?v=1LkOrc-Le-Y&ab_channel=Techdose

#include<bits/stdc++.h>
void addItem(priority_queue<int>&maxHeap,priority_queue<int,vector<int>,greater<int>>&minHeap
, int num){
    int lsize = maxHeap.size();
    int rsize = minHeap.size();

    if(lsize == 0) maxHeap.push(num);
    else if(lsize == rsize){
        if(minHeap.top() > num) maxHeap.push(num);
        else{
            int ele = minHeap.top();
            minHeap.pop();

            maxHeap.push(ele);
            minHeap.push(num);
        }
    }
    else{
        if(maxHeap.top() < num) minHeap.push(num);
        else{
            int ele = maxHeap.top();
            maxHeap.pop();

            maxHeap.push(num);
            minHeap.push(ele);
        }
    }
}

int getMedian(priority_queue<int>&maxHeap,priority_queue<int,vector<int>,greater<int>>&minHeap){
    int n = minHeap.size() + maxHeap.size();
    if(n % 2 == 0) return (maxHeap.top() + minHeap.top())/2;

    return maxHeap.top();
}
void findMedian(int *arr, int n)
{
    priority_queue<int> maxHeap;
    priority_queue<int,vector<int>,greater<int>> minHeap;
    for(int i=0;i<n;i++){
        addItem(maxHeap,minHeap,arr[i]);
        cout<<getMedian(maxHeap,minHeap)<<" ";
    }
}
