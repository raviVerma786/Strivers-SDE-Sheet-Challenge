Question Link : https://www.codingninjas.com/codestudio/problems/implement-trie_8230696?challengeSlug=striver-sde-challenge&leftPanelTab=0
https://leetcode.com/problems/implement-trie-prefix-tree/

Solution : 
//https://youtu.be/dBGUmUQhjaM
/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */


class Trie {
private:
    Trie* next[26];
    bool isEnd;
public:

    /** Initialize your data structure here. */
    Trie() {
        for(int i=0;i<26;i++) next[i] = NULL;
        isEnd = false;
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie* node = this;
        
        for(char ch : word){
            if(!node->next[ch - 'a']){
                node->next[ch - 'a'] = new Trie();
            }
            
            node = node->next[ch - 'a'];
        }

        node->isEnd = true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Trie* node = this;

        for(char ch : word){
            if(!node->next[ch - 'a']) return false;
            node = node->next[ch - 'a'];
        }

        return node->isEnd;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Trie* node = this;

        for(char ch : prefix){
            if(!node->next[ch - 'a']) return false;
            node = node->next[ch - 'a'];
        }

        return true;
    }
};
