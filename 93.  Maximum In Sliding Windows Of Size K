Question link : https://www.codingninjas.com/studio/problems/maximum-in-sliding-windows-of-size-k_8230772?challengeSlug=striver-sde-challenge&leftPanelTab=1
https://leetcode.com/problems/sliding-window-maximum/description/

striver : https://youtu.be/CZQGRp93K4k

Solution 1: 

#include <bits/stdc++.h> 
vector<int> slidingWindowMaximum(vector<int> &nums, int &k)
{
   if(k == 1) return nums;

   multiset<int> st;
   vector<int> ans;
   for(int i=0;i<nums.size();i++){
       st.insert(nums[i]);

       if(i >= k-1){
           ans.push_back(*st.rbegin());
           st.erase(st.find(nums[i - (k-1)]));
       }
   }

   return ans;
}

Solution 2 : optimal solution

#include <bits/stdc++.h> 
vector<int> slidingWindowMaximum(vector<int> &arr, int &k)
{
        if(k == 1) return arr;

        int n = arr.size();
        deque<int> dq;
        vector<int> ans;
        
        for(int i=0;i<n;i++){
            if(!dq.empty() and dq.front()==i-k)
                dq.pop_front();
                
            while(!dq.empty() and arr[dq.back()]<arr[i])
                dq.pop_back();
                
            dq.push_back(i);
            
            if(i>=k-1) ans.push_back(arr[dq.front()]);
        }
        
        return ans;
}

