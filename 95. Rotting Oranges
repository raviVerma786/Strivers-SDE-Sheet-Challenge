Question Link : https://leetcode.com/problems/rotting-oranges/description/
https://www.codingninjas.com/studio/problems/rotting-oranges_8230701?challengeSlug=striver-sde-challenge&leftPanelTab=0

Solution : 


// https://youtu.be/yf3oUhkvqA0
#include<bits/stdc++.h>
int minTimeToRot(vector<vector<int>>& grid, int n, int m)
{
    vector<vector<int>> dp(n,vector<int>(m,INT_MAX));
    queue<pair<int,pair<int,int>>> q; //{time,i,j}

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j] == 2){
                dp[i][j] = 0;
                q.push({0,{i,j}});
            }
        }
    }
    
    int dx[4] = {1,0,-1,0};
    int dy[4] = {0,1,0,-1};

    while(!q.empty()){
        int t = q.front().first, i=q.front().second.first,
        j = q.front().second.second;
        q.pop();

        for(int k=0;k<4;k++){
            int r = i + dx[k], c = j + dy[k];
            if(r >= 0 && c >= 0 && r < n && c<m && grid[r][c] == 1){
                if(t + 1 < dp[r][c]){
                    dp[r][c] = t+1;
                    q.push({t+1,{r,c}});
                }
            }
        }
    }

    int ans = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j] == 1){
                if(dp[i][j] == INT_MAX) return -1;
                ans = max(ans,dp[i][j]);
            }
        }
    }

    return ans;
}
