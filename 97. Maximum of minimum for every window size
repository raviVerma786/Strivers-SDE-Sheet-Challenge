Question Link : https://www.codingninjas.com/studio/problems/maximum-of-minimum-for-every-window-size_8230783?challengeSlug=striver-sde-challenge&leftPanelTab=0

Solution : (TLE)

#include <bits/stdc++.h> 
vector<int> maxMinWindow(vector<int> a, int n) {
    vector<int> ans;

    for(int k=1;k<=n;k++){
        //here k is window size
        deque<int> dq;
        int minMaxEle = INT_MIN;
        
        for(int i=0;i<n;i++){
            if(!dq.empty() && dq.front() == i-k) dq.pop_front();
            while(!dq.empty() && a[dq.back()] >= a[i]) dq.pop_back();

            dq.push_back(i);

            if(i >= k-1){
                minMaxEle = max(minMaxEle,a[dq.front()]);
            }
        }
        
        ans.push_back(minMaxEle);
    }

    return ans;
}


Solution 2 : Optimal solution

// https://www.youtube.com/watch?v=yRagSKdQgsc&ab_channel=BroCoders
#include <bits/stdc++.h> 
vector<int> maxMinWindow(vector<int> arr, int n) {
    vector<int> left(n,-1),right(n,n);
    stack<int> st;
    for(int i=0;i<n;i++){
        while(!st.empty() && arr[st.top()] >= arr[i]) st.pop();
        if(!st.empty()) left[i] = st.top();
        st.push(i);
    }

    while(!st.empty()) st.pop();

    for(int i=n-1;i>=0;i--){
        while(!st.empty() &&arr[st.top()] >= arr[i]) st.pop();
        if(!st.empty()) right[i] = st.top();
        st.push(i);
    }

    vector<int> ans(n,INT_MIN);
    for(int i=0;i<n;i++){
        ans[right[i] - left[i] - 2] = max(ans[right[i] - left[i] -2], arr[i]);
    }

    for(int i=n-2;i>=0;i--) ans[i] = max(ans[i],ans[i+1]);
    return ans;
}
