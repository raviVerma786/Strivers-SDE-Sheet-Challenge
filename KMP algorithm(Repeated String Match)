Question Link : https://leetcode.com/problems/repeated-string-match/description/

Solution : 

//KMP algorithm (apna college)
//https://www.youtube.com/watch?v=Y4J7_1SyTEk&ab_channel=GeeksforGeeksPractice
class Solution {
private:
    vector<int> prefixFunction(string &s){
        int n = s.size();
        vector<int> prefix(n,0);
        
        for(int i=1;i<n;i++){
            int j = prefix[i-1];

            while(j>0 && s[i] != s[j]) j = prefix[j-1];

            if(s[i] == s[j]) j++;

            prefix[i] = j;
        } 

        return prefix;
    }
    
    bool isSubstring(string text, string pattern){
       vector<int> prefix = prefixFunction(pattern);

       int i=0,j=0;
       while(i < text.size()){
           if(text[i] == pattern[j]){
               i++;
               j++;
           }
           else{
               if(j > 0) j = prefix[j-1];
               else i++;
           }

           if(j == pattern.size()) return true;
       }

       return false;
    }

public:
    int repeatedStringMatch(string a, string b) {
        int cnt = 1;
        int n = a.size();
        string temp = a;
        
        while(a.size() < b.size()){
            a += temp;
            cnt++;
        }
        
        if(isSubstring(a,b)) return cnt;

        a += temp;
        cnt++;
        if(isSubstring(a,b)) return cnt;

        return -1;
    }
};
