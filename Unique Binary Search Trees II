Question Link : https://leetcode.com/problems/unique-binary-search-trees-ii/description/

solution : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// https://www.youtube.com/watch?v=qOItdXuTZGo&ab_channel=Pepcoding
    vector<TreeNode*> helper(int start,int end){
        if(end < start) return {NULL};

        vector<TreeNode*> ans;
        for(int node = start;node<=end;node++){
            vector<TreeNode*> left = helper(start,node-1);
            vector<TreeNode*> right = helper(node + 1,end);
            
            for(TreeNode* l : left){
                for(TreeNode* r : right){
                    TreeNode* root = new TreeNode(node);
                    root->left = l;
                    root->right = r;

                    ans.push_back(root);
                }
            }
        }

        return ans;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        return helper(1,n);
    }
};
